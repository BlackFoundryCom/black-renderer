# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Run tests and deploy

on:
  push:
    branches: [ master ]
    tags: [ "v*" ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: [3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install .
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest -v
    - name: Storing Test Data Artifacts
      if: failure()
      uses: actions/upload-artifact@master
      with:
        name: FailingImageOutput ${{ matrix.os }}
        path: ./Tests/tmpOutput

  deploy:
    # only run if the commit is tagged...
    if: startsWith(github.ref, 'refs/tags/v')
    # ... and all build jobs completed successfully
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: "3.x"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade setuptools wheel
    - name: Build wheel and source distro
      run: |
        python setup.py bdist_wheel
        python setup.py sdist
    - name: Extract release notes from annotated tag message
      id: release_notes
      env:
        # e.g. v0.1.0a1, v1.2.0b2 or v2.3.0rc3, but not v1.0.0
        PRERELEASE_TAG_PATTERN: "v[[:digit:]]+\\.[[:digit:]]+\\.[[:digit:]]+([ab]|rc)[[:digit:]]+"
      run: |
        # GH checkout action doesn't preserve tag annotations, we must fetch them
        # https://github.com/actions/checkout/issues/290
        git fetch --tags --force
        # strip leading 'refs/tags/' to get the tag name
        TAG_NAME="${GITHUB_REF##*/}"
        # Dump tag message to temporary .md file (excluding the PGP signature at the bottom)
        TAG_MESSAGE=$(git tag -l --format='%(contents)' $TAG_NAME | sed -n '/-----BEGIN PGP SIGNATURE-----/q;p')
        echo "$TAG_MESSAGE" > "${{ runner.temp }}/release_notes.md"
        # if the tag has a pre-release suffix mark the Github Release accordingly
        if egrep -q "$PRERELEASE_TAG_PATTERN" <<< "$TAG_NAME"; then
          echo "Tag contains a pre-release suffix"
          echo "IS_PRERELEASE=true" >> "$GITHUB_ENV"
        else
          echo "Tag does not contain pre-release suffix"
          echo "IS_PRERELEASE=false" >> "$GITHUB_ENV"
        fi
    - name: Publish distributions to PyPI
      uses: pypa/gh-action-pypi-publish@master
      with:
        user: __token__
        password: ${{ secrets.pypi_token }}
    - name: Create GitHub release
      id: create_release
      uses: actions/create-release@v1
      env:
        # This token is provided by Actions, you do not need to create your own token
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        body_path: "${{ runner.temp }}/release_notes.md"
        draft: false
        prerelease: ${{ env.IS_PRERELEASE }}
